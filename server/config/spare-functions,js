const { Http } = require('@status/codes');
const Admin = require('mongoose').model('Admin');
const PostGoogle = require('mongoose').model('PostGoogle');

const mongoose = require('mongoose');

const path = require('path');
const crypto = require('crypto');
const multer = require('multer');
const { GridFsStorage } = require('multer-gridfs-storage');
const mongoURI = 'mongodb://127.0.0.1:27017/m-4';

// add ons
const Grid = require('gridfs-stream');
let gfs;
let gfsT;
const process = require('process');


const imageFilter = function(req, file, cb) {
  if (!file.originalname.match(/\.(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)) {
    req.fileValidationError = 'Only image files are allowed for uploads! ';
    return cb(new Error('Only image files are allowed for uploads! ', false));
  }
  cb(null, true);
};

const storage = new GridFsStorage({
  url: mongoURI,
  options: { useNewUrlParser: true, useUnifiedTopology: true },
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          bucketName: 'uploads'
        };
        resolve(fileInfo);
      });
    });
  }
});

let connect = mongoose.createConnection(mongoURI, {
  useUnifiedTopology: true,
  useNewUrlParser: true,
});

mongoose.connection.once('connected', () => {
  gfs = Grid(mongoose.connection.db, mongoose.mongo);
  gfs.collection('uploads');
});

connect.once('open', () => {
  gfsT = new mongoose.mongo.GridFSBucket(connect.db, {bucketName: 'uploads'});
});

const createAllPosts = (posts) => {
  return new Promise((resolve, reject) => {
    let createdPostHolder = [];
    for(let idx = 0; idx < posts.length; idx++) {
      let newId = new mongoose.Types.ObjectId();
      PostGoogle.create({
        _id: newId,
        content: posts[idx].content,
        contentImages: posts[idx].contentImages,
        writtenBy: posts[idx].writtenBy,
        byImage: posts[idx].byImage,
        byDate: posts[idx].byDate,
      })
        .then(createdPosts => {
          createdPostHolder.push(createdPosts)
          if(idx === posts.length - 1){
            // console.log('Posts created successfully', createdPostHolder[0], '\n');
            resolve(createdPostHolder);
          }
        })
        .catch(error => {
          const errors = Object.keys(error.errors).map(key => error.errors[key].message);
          console.log('createAllPosts() -- .catch() - Posts created unsuccessfully', errors, '\n');
          resolve([]);
        });
    };
  });
};

const postUrl = '';
let postProcessStop = false;
    // Functions for post controller update function.
    let finalFiles = (fileIds) =>
      Array.isArray(fileIds)
        ? fileIds.map(id => updatedNewFiles[id.toString()] || id)
        : updatedNewFiles[fileIds.toString()] || fileIds;

    let finalFilesUpdate = (post, files) => {
      let images = [];
      let videos = [];
      let mainImage = [];
      files.forEach(file => {
        post.images.forEach((imageUObjectId, indexUImages, arrayUImages) => {
          if(imageUObjectId.toString() === file._id.toString()) {
            images.push(file)
          }
        });
        post.videos.forEach((videoUObjectId, indexUVideos, arrayUVideos) => {
          if(videoUObjectId.toString() === file._id.toString()) {
            videos.push(file)
          }
        });
        if (post.mainImage.toString() === file._id.toString()) {
          mainImage.push(file);
        }
      });
      return [images, videos, mainImage];
    };
module.exports = {
// Admin Controller
  showImage(request, response) {
      const { admin_id: adminId } = request.params;
      Admin.findOne({_id: adminId})
      .then(adminInfo => {
        if (!adminInfo) {
          return response.status(404).json(`No Administrator was found... ${adminInfo}`);
        }
        gfs.files.find({ _id: adminInfo.profilePicture })
          .toArray((err, files) => {
            if (!files) {
              return response.status(404).json(err);
            }
          })
          .then(newFiles => {
            return gfsT.openDownloadStreamByName(newFiles[0].filename).pipe(response);
          })
          .catch(error => response.status(Http.NotFound).json(error));
      })
      .catch(error => response.status(Http.NotFound).json(error));
  },
  destroy(request, response) {
    const { admin_id: adminId } = request.params;
    Admin.findByIdAndRemove(adminId)
      .then(adminInfo => {
        if (!adminInfo) {
          return response.status(404).json(`Review with the id: ${adminId} was not found...`);
        }
        gfs.files.find({ _id: adminInfo.profilePicture }).toArray((err, files) => {
          if (err) {
            return response.status(500).json({ message: 'Error retrieving files from GridFS.', error: err });
          }
        })
        .then(newFiles => {
          gfsT.delete(adminInfo.profilePicture, (err, file) => {
            if (err) {
              return response.status(Http.Conflict.json(err));
            }
          })
          console.log('destroy',newFiles);
          response.json(adminInfo);
        })
      })
      .catch(error => response.status(Http.Conflict).json(error));
  },
// Post Controller
  index(_request, response) {

    if (postProcessStop === true) {
      throw new Error(`index() -- If statement 1 - Failed to navigate to ${postUrl} due to postProcessStop state ${postProcessStop}.`);
    };

    postProcessStop = true;

    const currentTime = Date.now();
    const oneWeekInMillis = 7 * 24 * 60 * 60 * 1000;
    let timeOutP;
    let timeOutP2;
    let lastExecutionTimestamp;
    let retryPost = 15;
    let postWhileLoopStop = false;

    const thisProcessRemoverPost = () => {
      ['exit', 'SIGINT', 'SIGTERM', 'SIGHUP'].forEach(event => process.removeAllListeners(event));
    };

    const timeOutPost = (ms) => {
      return new Promise((resolve, reject) => {
        timeOutP2 = setInterval(() => {
          if (postWhileLoopStop) {
            clearInterval(timeOutP2);
            resolve([]);
          }
        }, 1000);
        timeOutP = setTimeout(() => {
          clearInterval(timeOutP2);
          resolve([]);
        }, ms);
      });
    };

    const thisTimeOutPostStop = () => {
      postWhileLoopStop = true;
      clearTimeout(timeOutP);
    };

    const timeOutPromisePost = timeOutPost(180000).catch();
    // const timeOutPromisePost = timeOutPost(180000).catch((eT) => console.log('TimeOutPromisePost Error Catch', eT));

    const deleteAllManualPosts = (posts) => {
      if (posts.length === 0) {
        return console.log('deleteAllManualPosts -- If statement 1 - No posts found to Delete.', posts, '\n');
      }
      for (let idx = 0; idx < posts.length; idx++) {
        PostGoogle.findByIdAndRemove(posts[idx]._id)
          .then(post => {
            if (!post) {
              console.log(`deleteAllManualPosts - PostGoogle.findByIdAndRemove() -- If Statement 1 - Post with the id: ${post._id} was not found... \n`);
            }
          })
          .catch(error => console.log(`deleteAllManualPosts - PostGoogle.findByIdAndRemove() -- .catch() - Post with the id: ${post._id} was not found... \n`, error, '\n'));
      }
    };

    let retryItPosts = async (postUrl, retryP) => {
      thisProcessRemoverPost();

      const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox']});
      const page = await browser.newPage();

      if (retryP < 0) {
        throw new Error(`retryItPosts -- If Statement 1 - Failed to navigate to ${postUrl} after maximum allowed attempts. \n`);
      };

      return await Promise.race([Promise.all([
        await browser,
        await page,
        await page.goto(postUrl, {
          waitUntil: 'load',
          timeout: 600000
        }),
        await page.waitForNavigation({
          waitUntil: ['load', "networkidle2"],
          timeout: 600000
        }),
        await page.waitForResponse(responses => responses.ok()),
        await page.evaluate(() => {
          const selectors = {
            byImageClass : 'jE1Ghf',
            postImageClass : 'tTCrvf',
            postContentClass : 'hfJtQe',
            altPostContentClass : 'Jbl1pc',
            writtenBy: 'kf0LHf',
            byDate: 'mgX1W',
          };

          const arrMaker = (arrSelector) => {
            let newArr = [];
            let count = 0;
            let altPostsArr = document.getElementsByClassName(selectors.altPostContentClass);
            let contentArr = document.getElementsByClassName(arrSelector);
            if (arrSelector === selectors.byImageClass) {
              for(let one of contentArr) {
                newArr.push(one.getAttribute('src'));
              }
            } else if(arrSelector === selectors.postImageClass && selectors.postImageClass === undefined) {
              selectors.postImageClass = [];
            } else if(arrSelector === selectors.postImageClass && selectors.postImageClass !== undefined) {
              for(let two of contentArr) {
                newArr.push(two.getAttribute('src'));
              }
            }
            else if (arrSelector === selectors.postContentClass) {
              for(let item of contentArr) {
                if (item.innerText === '') {
                  newArr.push(altPostsArr[count].innerText);
                  count++;
                } else {
                  newArr.push(item.innerText);
                }
              }
            }
            else {
              for(let item of contentArr) {
                newArr.push(item.innerText);
              }
            }
            return newArr;
          };
          const postSplitter = (postsObject) => {
            let postArr = [];
            for(let i = 0; i<postsObject.byDate.length; i++) {
              let newPost = {
                content: postsObject.content[i],
                contentImages: postsObject.contentImages[i] || [],
                writtenBy: postsObject.writtenBy[i],
                byImage: postsObject.byImage[i],
                byDate: postsObject.byDate[i],
              };
              postArr.push(newPost);
            }
            return postArr;
          };
          const getAllSPosts = () => {
            return {
              content: arrMaker(selectors.postContentClass),
              contentImages: arrMaker(selectors.postImageClass),
              writtenBy: arrMaker(selectors.writtenBy),
              byImage: arrMaker(selectors.byImageClass),
              byDate: arrMaker(selectors.byDate),
            };
          };
          return postSplitter(getAllSPosts());
        }),
        await browser.close(),
      ]), timeOutPromisePost
      ])
      .then((tryResponsePost) => {
        return new Promise((resolve, reject) => {
          if (tryResponsePost[tryResponsePost.length-2] !== undefined) {
            PostGoogle.find({})
              .then(posts => {
                deleteAllManualPosts(posts);
                createAllPosts(tryResponsePost[tryResponsePost.length-2])
                  .then(newPosts => {
                    resolve(newPosts);
                  })
                  .catch(error => {
                    console.log('retryItPosts - createAllPosts -- .then-1 -- .catch-1 \n', error);
                    resolve([]);
                  });
              })
              .catch(error => {
                console.log('retryItPosts - PostGoogle.find({}) -- .catch-1 \n', error);
                resolve([]);
              });
          };
          if (tryResponsePost[tryResponsePost.length-2] === undefined) {
            resolve([]);
          };
        });
      })
      .catch((e) => {
        return new Promise((resolve) => {
          console.log(`retryItPosts -- .catch-1 ${e} occurred resulting in the failed to navigation to ${postUrl}, ${retryP-1} attempts left.`);
          resolve([]);
        });
      })
      .finally(() => {
        thisProcessRemoverPost();
        thisTimeOutPostStop();
      });
    };

    PostGoogle.find({})
    .then(posts => {
      postProcessStop = false;
      if (posts.length !== 0) {
        lastExecutionTimestamp = posts[0].createdAt;
      } else {
        lastExecutionTimestamp = 0;
      };

      if (currentTime - lastExecutionTimestamp < oneWeekInMillis) {
        response.json(posts);
      } else {
        console.log('hello', currentTime, lastExecutionTimestamp, oneWeekInMillis);
        postProcessStop = false;
        retryItPosts(postUrl, retryPost)
          .then(pos => {
            response.json(pos);
          })
          .catch((err) => {
            console.log('Post.find({}) - retryItPosts - createAllPosts -- .catch-1', err, '\n', 'retryPost', retryPost, '\n');
            throw new Error(err)
          })
          .finally(() => {
            retryPost -= 1;
            thisTimeOutPostStop();
            thisProcessRemoverPost();
            postProcessStop = false;
          })
      };
    })
    .catch(error => response.status(Http.InternalServerError).json(error));
  },
}
